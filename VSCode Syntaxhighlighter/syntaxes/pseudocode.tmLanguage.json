{
	"name": "Pseudocode",
	"patterns": [
		{"include": "#comments"},

		{"include": "#func_declarations"},
		{"include": "#var_types"},

		{"include": "#keywords"},
		{"include": "#blueprints"},
		{"include": "#jump_statements"},

		{"include": "#import_statements"},
		{"include": "#import_lines"},
		
		{"include": "#true_literal"},
		{"include": "#false_literal"},

		{"include": "#chars"},
		{"include": "#strings"},

		{"include": "#operators"},

		{"include": "#numeric_constants"},
		{"include": "#constants"},
		{"include": "#names"},
		{"include": "#number_literals"}
	],
	"repository": {
		"comments": {
			"patterns": [{
				"name": "comment.pseudocode",
				"match": "#(.*)"
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.pseudocode",
				"match": "\\b(main|func|method|if|elif|any|else|while|until|repeat|from|to|step|as|for|is|try|catch|static|native|final|const|public|null)\\b|(\\|)|(\\?)|((?<=for\\s\\S+\\s)in)"
			}]
		},
		"blueprints": {
			"patterns": [{
				"name": "blueprint.pseudocode",
				"match": "\\b(class|interface|enum|struct|module)\\b"
			}]
		},
		"jump_statements": {
			"patterns": [{
				"name": "keyword.return.pseudocode",
				"match": "\\b(return|break|continue|goto)\\b|(\\-\\>)"
			}]
		},
		"import_statements": {
			"patterns": [{
				"name": "keyword.import.pseudocode",
				"match": "\\b(import\\s)\\b"
			}]
		},
		"import_lines": {
			"patterns": [{
				"name": "comment.pseudocode",
				"match": "(?<=import\\s)((\\w+)|(\\.))+"
			}]
		},
		"constants": {
			"patterns": [{
				"name": "constant.language",
				"match": "\\b([A-ZÄÖÜ_])+\\b"
			}]
		},
		"names": {
			"patterns": [{
				"name": "constant.other.color",
				"match": "\\w*([a-zäöüßA-ZÄÖÜ])+\\w*"
			}]
		},
		"numeric_constants": {
			"patterns": [{
				"name": "constant.numeric.pseudocode",
				"match": "(?i)\\b(INF|NaN)\\b"
			}]
		},
		"number_literals": {
			"patterns": [{
				"name": "constant.numeric.pseudocode",
				"match": "\\d+"
			}]
		},
		"true_literal": {
			"patterns": [{
				"name": "literal.true.pseudocode",
				"match": "\\b(true)\\b"
			}]
		},
		"false_literal": {
			"patterns": [{
				"name": "literal.false.pseudocode",
				"match": "\\b(false)\\b"
			}]
		},
		"chars": {
			"patterns": [{
				"name": "constant.character.escape.pseudocode",
				"match": "'.'"
			}]
		}, 
		"strings": {
			"name": "string.quoted.double.pseudocode",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.pseudocode",
					"match": "\\\\."
				}
			]
		},
		"operators": {
			"patterns": [{
				"name": "operator.pseudocode",
				"match": "([\\+|\\-|\\*|\\/|\\%|\\^|\\!|\\=]=?)|(\\b(and|nand|or|nor|xor|xnor|root|not|in)\\b)|(<|<=|=|>=|>)|(≤|≠|≥)"
			}]
		},
		"var_types": {
			"patterns": [{
				"name": "storage.type.pseudocode",
				"match": "\\b(var|nr|int|bool|text|char|def)\\b"
			}]
		},
		"func_declarations": {
			"patterns": [{
				"name": "entity.name.function.pseudocode",
				"match": "\\w+((?=\\()|(?=\\<))"
			}]
		}
	},
	"scopeName": "source.pseudocode"
}
