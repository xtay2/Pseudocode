{
	"name": "Pseudocode",
	"patterns": [
		{"include": "#comments"},
		{"include": "#keywords"},

		{"include": "#jump_statements"},
		{"include": "#object_keywords"},

		{"include": "#imports"},

		{"include": "#func_declarations"},
		{"include": "#var_types"},
	
		{"include": "#bool_literals"},

		{"include": "#chars"}, {"include": "#strings"},

		{"include": "#operators"},

		{"include": "#numeric_constants"},
		{"include": "#names"},
		{"include": "#number_literals"}
	],
	"repository": {
		"comments": {
			"name": "comment.pseudocode",
			"match": "#.*"
		},

		"keywords": {
			"patterns": [{
				"name": "keyword.control.pseudocode",
				"match": "\\b(if|elif|any|else)\\b"
			}, {
				"name": "keyword.control.pseudocode",
				"match": "\\b(while|until|repeat|as|step|for)\\b|((?<=for\\s\\S+\\s)in)"
			}, {
				"name": "keyword.control.pseudocode",
				"match": "\\b(main|func|method)\\b"
			}, {
				"name": "blueprint.pseudocode",
				"match": "\\b(class|interface|enum|struct|module)\\b"
			}, {
				"name": "keyword.control.pseudocode",
				"match": "\\b(native|final|const|solid)\\b"
			}, {
				"name": "keyword.control.pseudocode",
				"match": "\\b(public|protected|private|show)\\b"
			}, {
				"name": "keyword.control.pseudocode",
				"match": "\\b(try|catch)\\b"
			}, {
				"name": "keyword.control.pseudocode",
				"match": "\\b(is|null)\\b|(\\|)|(\\?)|(\\$)"
			}]
		},
		"jump_statements": {
			"patterns": [{
				"name": "keyword.return.pseudocode",
				"match": "\\b(return|break|continue|goto)\\b|(\\-\\>)"
			}]
		},
		"object_keywords": {
			"patterns": [{
				"name": "support.class",
				"match": "\\b(new|this|super)\\b"
			}]
		},

		"imports": {
			"patterns": [{
				"name": "keyword.import.pseudocode",
				"match": "\\b(import\\s)\\b"
			}, {
				"name": "comment.pseudocode",
				"match": "(?<=import\\s)((\\w+)|(\\.))+"
			}]
		},

		"func_declarations": {
			"patterns": [{
				"name": "entity.name.function.pseudocode",
				"match": "\\b([a-zäöü][a-zäöüßA-ZÄÖÜ]*)(?=\\()"
			}]
		},
		"var_types": {
			"patterns": [{
				"name": "storage.type.pseudocode",
				"match": "\\b(nr|text|bool|bin|int|char|var|def)\\b"
			}]
		},

		"bool_literals": {
			"patterns": [{
				"name": "literal.true.pseudocode",
				"match": "\\b(true)\\b"
			}, {
				"name": "literal.false.pseudocode",
				"match": "\\b(false)\\b"
			}]
		},

		"chars": {
			"name": "constant.character.escape.pseudocode",
			"match": "'.'"
		}, 
		"strings": {
			"name": "string.quoted.double.pseudocode",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.pseudocode",
					"match": "\\\\."
				}
			]
		},

		"operators": {
			"patterns": [{
				"name": "operator.pseudocode",
				"match": "[+\\-*/%^!=]=?"
			}, {
				"name": "operator.pseudocode",
				"match": "\\b(and|nand|or|nor|xor|xnor|root|not|in)\\b"
			}, {
				"name": "operator.pseudocode",
				"match": "[<≤≠≥>]=?|=="
			}]
		},

		"numeric_constants": {
			"patterns": [{
				"name": "constant.numeric.pseudocode",
				"match": "\\b(INF|NaN)\\b"
			}]
		},
		"names": {
			"patterns": [{
				"name": "support.type",
				"match": "[A-ZÄÖÜ]\\w+"
			}, {
				"name": "constant.other.color",
				"match": "\\b([äöü][a-zäöüßA-ZÄÖÜ]*)\\b"
			}]
		},
		"number_literals": {
			"patterns": [{
				"name": "constant.numeric.pseudocode",
				"match": "\\d+"
			}]
		}
	},
	"scopeName": "source.pseudocode"
}
